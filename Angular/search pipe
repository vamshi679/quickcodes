component.html
===============
 <div>
        <select class="form-control w-25" name="" id="" [(ngModel)]='value'>
            <option value='eno'>eno</option>
            <option value="name">Name</option>
            <option value='salary'>salary</option>
        </select>
    </div>
        {{value}}

    <br>
        <input type="text" placeholder="search Here" class="form-control w-25" [(ngModel)]="searchTerm">
    <br>
    <div>
        <table class="table table-sm table-bordered">
            <thead>
                <th>empno</th>
                <th>Name</th>
                <th>Salary</th>
            </thead>
            <tr *ngFor="let i of emps | search:searchTerm:value ">
                <td>{{i.eno}}</td>
                <td>{{i.name}}</td>
                <td>{{i.salary}}</td>
            </tr>
        </table>
    </div>
</div>

component.ts
==============
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-child3',
  templateUrl: './child3.component.html',
  styleUrls: ['./child3.component.css']
})
export class Child3Component {

emps: any[] = [];   //assign variable containing array from get request

}


searchpipe.ts
=============
import { Pipe, PipeTransform } from '@angular/core';
@Pipe({
  name: 'search'
})
export class SearchPipe implements PipeTransform {
   transform(emps: object[], searchTerm: any, value: any): any {
    console.log(typeof (value))
    if (searchTerm == undefined) {
      return emps;
    }
       else{
       console.log(typeof(searchTerm))
       console.log(value)     
       if ('eno' === value) 
      {
        return ( emps.filter(x => x['eno'].toString().indexOf(searchTerm) !== -1));
      }

      else if('salary'===value){
        return ( emps.filter(x => x['salary'].toString().indexOf(searchTerm) !== -1));
      }
      else
      {
        return ( emps.filter(x => x['name'].indexOf(searchTerm) !== -1))
  }  
 }
 }
}


